// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace API_Back.Models;

public partial class CineDBContext : DbContext
{
    public CineDBContext(DbContextOptions<CineDBContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Area> Areas { get; set; }

    public virtual DbSet<Asiento> Asientos { get; set; }

    public virtual DbSet<AsientosXreproduccione> AsientosXreproducciones { get; set; }

    public virtual DbSet<Cartelera> Carteleras { get; set; }

    public virtual DbSet<Cliente> Clientes { get; set; }

    public virtual DbSet<DetalleFactura> DetalleFacturas { get; set; }

    public virtual DbSet<Empleado> Empleados { get; set; }

    public virtual DbSet<Factura> Facturas { get; set; }

    public virtual DbSet<Fila> Filas { get; set; }

    public virtual DbSet<Genero> Generos { get; set; }

    public virtual DbSet<Idioma> Idiomas { get; set; }

    public virtual DbSet<Pelicula> Peliculas { get; set; }

    public virtual DbSet<PeliculasXcartelera> PeliculasXcarteleras { get; set; }

    public virtual DbSet<PeliculasXidioma> PeliculasXidiomas { get; set; }

    public virtual DbSet<Promocione> Promociones { get; set; }

    public virtual DbSet<Reproduccion> Reproducciones { get; set; }

    public virtual DbSet<Sala> Salas { get; set; }

    public virtual DbSet<SalasXempleado> SalasXempleados { get; set; }

    public virtual DbSet<TiposSala> TiposSalas { get; set; }

    public virtual DbSet<Usuario> Usuarios { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Area>(entity =>
        {
            entity.HasKey(e => e.IdArea).HasName("pkAreas");

            entity.Property(e => e.IdArea).HasColumnName("idArea");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("nombre");
        });

        modelBuilder.Entity<Asiento>(entity =>
        {
            entity.HasKey(e => e.IdAsiento).HasName("pkAsientos");

            entity.Property(e => e.IdAsiento).HasColumnName("idAsiento");
            entity.Property(e => e.IdFila).HasColumnName("idFila");
            entity.Property(e => e.NumeroAsiento).HasColumnName("numeroAsiento");

            entity.HasOne(d => d.IdFilaNavigation).WithMany(p => p.Asientos)
                .HasForeignKey(d => d.IdFila)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fkFilasAsientos");
        });

        modelBuilder.Entity<AsientosXreproduccione>(entity =>
        {
            entity.HasKey(e => e.IdAsientoXreproduccion).HasName("pkAsientosXReproducciones");

            entity.ToTable("AsientosXReproducciones");

            entity.Property(e => e.IdAsientoXreproduccion).HasColumnName("idAsientoXReproduccion");
            entity.Property(e => e.IdAsiento).HasColumnName("idAsiento");
            entity.Property(e => e.IdReproduccion).HasColumnName("idReproduccion");
            entity.Property(e => e.Libre).HasColumnName("libre");

            entity.HasOne(d => d.IdAsientoNavigation).WithMany(p => p.AsientosXreproducciones)
                .HasForeignKey(d => d.IdAsiento)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fkAsientosAsientosXReproducciones");

            entity.HasOne(d => d.IdReproduccionNavigation).WithMany(p => p.AsientosXreproducciones)
                .HasForeignKey(d => d.IdReproduccion)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fkReproduccionesAsientosXReproducciones");
        });

        modelBuilder.Entity<Cartelera>(entity =>
        {
            entity.HasKey(e => e.IdCartelera).HasName("pkCarteleras");

            entity.Property(e => e.IdCartelera).HasColumnName("idCartelera");
            entity.Property(e => e.FechaFin)
                .HasColumnType("datetime")
                .HasColumnName("fechaFin");
            entity.Property(e => e.FechaInicio)
                .HasColumnType("datetime")
                .HasColumnName("fechaInicio");
        });

        modelBuilder.Entity<Cliente>(entity =>
        {
            entity.HasKey(e => e.IdCliente).HasName("pkClientes");

            entity.Property(e => e.IdCliente).HasColumnName("idCliente");
            entity.Property(e => e.Apellido)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("apellido");
            entity.Property(e => e.Edad).HasColumnName("edad");
            entity.Property(e => e.IdUsuario).HasColumnName("idUsuario");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("nombre");
            entity.Property(e => e.Telefono)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("telefono");

            entity.HasOne(d => d.IdUsuarioNavigation).WithMany(p => p.Clientes)
                .HasForeignKey(d => d.IdUsuario)
                .HasConstraintName("FK_clientes_usuarios");
        });

        modelBuilder.Entity<DetalleFactura>(entity =>
        {
            entity.HasKey(e => e.IdDetalleFacturas).HasName("pkDetalleFacturas");

            entity.Property(e => e.IdDetalleFacturas).HasColumnName("idDetalleFacturas");
            entity.Property(e => e.IdAsiento).HasColumnName("idAsiento");
            entity.Property(e => e.IdFactura).HasColumnName("idFactura");
            entity.Property(e => e.IdPromocion).HasColumnName("idPromocion");
            entity.Property(e => e.IdReproduccion).HasColumnName("idReproduccion");
            entity.Property(e => e.Precio).HasColumnName("precio");

            entity.HasOne(d => d.IdAsientoNavigation).WithMany(p => p.DetalleFacturas)
                .HasForeignKey(d => d.IdAsiento)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fkAsientosDetalleFacturas");

            entity.HasOne(d => d.IdFacturaNavigation).WithMany(p => p.DetalleFacturas)
                .HasForeignKey(d => d.IdFactura)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fkFacturasDetalleFacturas");

            entity.HasOne(d => d.IdPromocionNavigation).WithMany(p => p.DetalleFacturas)
                .HasForeignKey(d => d.IdPromocion)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fkPromocionesDetalleFacturas");

            entity.HasOne(d => d.IdReproduccionNavigation).WithMany(p => p.DetalleFacturas)
                .HasForeignKey(d => d.IdReproduccion)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fkReproduccionesDetalleFacturas");
        });

        modelBuilder.Entity<Empleado>(entity =>
        {
            entity.HasKey(e => e.IdEmpleado).HasName("pkEmpleados");

            entity.Property(e => e.IdEmpleado).HasColumnName("idEmpleado");
            entity.Property(e => e.Apellido)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("apellido");
            entity.Property(e => e.IdArea).HasColumnName("idArea");
            entity.Property(e => e.IdUsuario).HasColumnName("idUsuario");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("nombre");
            entity.Property(e => e.Telefono)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("telefono");

            entity.HasOne(d => d.IdAreaNavigation).WithMany(p => p.Empleados)
                .HasForeignKey(d => d.IdArea)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fkAreasEmpleados");

            entity.HasOne(d => d.IdUsuarioNavigation).WithMany(p => p.Empleados)
                .HasForeignKey(d => d.IdUsuario)
                .HasConstraintName("FK_empleados_usuarios");
        });

        modelBuilder.Entity<Factura>(entity =>
        {
            entity.HasKey(e => e.IdFactura).HasName("pkFacturas");

            entity.Property(e => e.IdFactura).HasColumnName("idFactura");
            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("fecha");
            entity.Property(e => e.IdCliente).HasColumnName("idCliente");

            entity.HasOne(d => d.IdClienteNavigation).WithMany(p => p.Facturas)
                .HasForeignKey(d => d.IdCliente)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fkClientesFacturas");
        });

        modelBuilder.Entity<Fila>(entity =>
        {
            entity.HasKey(e => e.IdFila).HasName("pkFilas");

            entity.Property(e => e.IdFila).HasColumnName("idFila");
            entity.Property(e => e.Letra)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("letra");
            entity.Property(e => e.NumeroSala).HasColumnName("numeroSala");

            entity.HasOne(d => d.NumeroSalaNavigation).WithMany(p => p.Filas)
                .HasForeignKey(d => d.NumeroSala)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fkSalasFilas");
        });

        modelBuilder.Entity<Genero>(entity =>
        {
            entity.HasKey(e => e.IdGenero).HasName("pkGeneros");

            entity.Property(e => e.IdGenero).HasColumnName("idGenero");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("nombre");
        });

        modelBuilder.Entity<Idioma>(entity =>
        {
            entity.HasKey(e => e.IdIdioma).HasName("pkIdiomas");

            entity.Property(e => e.IdIdioma).HasColumnName("idIdioma");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("nombre");
        });

        modelBuilder.Entity<Pelicula>(entity =>
        {
            entity.HasKey(e => e.IdPelicula).HasName("pkPeliculas");

            entity.Property(e => e.IdPelicula).HasColumnName("idPelicula");
            entity.Property(e => e.DuracionMinutos).HasColumnName("duracionMinutos");
            entity.Property(e => e.EstaActiva).HasColumnName("estaActiva");
            entity.Property(e => e.FechaEstreno).HasColumnName("fechaEstreno");
            entity.Property(e => e.IdGenero).HasColumnName("idGenero");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("nombre");
            entity.Property(e => e.Sinopsis)
                .HasColumnType("text")
                .HasColumnName("sinopsis");
            entity.Property(e => e.UrlPortada)
                .HasColumnType("text")
                .HasColumnName("urlPortada");

            entity.HasOne(d => d.IdGeneroNavigation).WithMany(p => p.Peliculas)
                .HasForeignKey(d => d.IdGenero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fkGenerosPeliculas");
        });

        modelBuilder.Entity<PeliculasXcartelera>(entity =>
        {
            entity.HasKey(e => e.IdPeliculaXcartelera).HasName("pkPeliculasXCarteleras");

            entity.ToTable("PeliculasXCarteleras");

            entity.Property(e => e.IdPeliculaXcartelera).HasColumnName("idPeliculaXCartelera");
            entity.Property(e => e.IdCartelera).HasColumnName("idCartelera");
            entity.Property(e => e.IdPelicula).HasColumnName("idPelicula");

            entity.HasOne(d => d.IdCarteleraNavigation).WithMany(p => p.PeliculasXcarteleras)
                .HasForeignKey(d => d.IdCartelera)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fkCartelerasPeliculasXCarteleras");

            entity.HasOne(d => d.IdPeliculaNavigation).WithMany(p => p.PeliculasXcarteleras)
                .HasForeignKey(d => d.IdPelicula)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fkPeliculasPeliculasXCarteleras");
        });

        modelBuilder.Entity<PeliculasXidioma>(entity =>
        {
            entity.HasKey(e => e.IdPeliculaXidioma).HasName("pkPeliculasXIdiomas");

            entity.ToTable("PeliculasXIdiomas");

            entity.Property(e => e.IdPeliculaXidioma).HasColumnName("idPeliculaXIdioma");
            entity.Property(e => e.IdIdioma).HasColumnName("idIdioma");
            entity.Property(e => e.IdPelicula).HasColumnName("idPelicula");

            entity.HasOne(d => d.IdIdiomaNavigation).WithMany(p => p.PeliculasXidiomas)
                .HasForeignKey(d => d.IdIdioma)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fkIdiomasPeliculasXIdiomas");

            entity.HasOne(d => d.IdPeliculaNavigation).WithMany(p => p.PeliculasXidiomas)
                .HasForeignKey(d => d.IdPelicula)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fkPeliculasPeliculasXIdiomas");
        });

        modelBuilder.Entity<Promocione>(entity =>
        {
            entity.HasKey(e => e.IdPromocion).HasName("pkPromociones");

            entity.Property(e => e.IdPromocion).HasColumnName("idPromocion");
            entity.Property(e => e.Descuento)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("descuento");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("nombre");
        });

        modelBuilder.Entity<Reproduccion>(entity =>
        {
            entity.HasKey(e => e.IdReproduccion).HasName("pkReproducciones");

            entity.Property(e => e.IdReproduccion).HasColumnName("idReproduccion");
            entity.Property(e => e.HorarioInicio)
                .HasColumnType("smalldatetime")
                .HasColumnName("horarioInicio");
            entity.Property(e => e.IdIdioma).HasColumnName("idIdioma");
            entity.Property(e => e.IdPelicula).HasColumnName("idPelicula");
            entity.Property(e => e.NumeroSala).HasColumnName("numeroSala");

            entity.HasOne(d => d.IdIdiomaNavigation).WithMany(p => p.Reproducciones)
                .HasForeignKey(d => d.IdIdioma)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fkIdiomasReproducciones");

            entity.HasOne(d => d.IdPeliculaNavigation).WithMany(p => p.Reproducciones)
                .HasForeignKey(d => d.IdPelicula)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fkPeliculasReproducciones");

            entity.HasOne(d => d.NumeroSalaNavigation).WithMany(p => p.Reproducciones)
                .HasForeignKey(d => d.NumeroSala)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fkSalasReproducciones");
        });

        modelBuilder.Entity<Sala>(entity =>
        {
            entity.HasKey(e => e.NumeroSala).HasName("pkSalas");

            entity.Property(e => e.NumeroSala).HasColumnName("numeroSala");
            entity.Property(e => e.IdTipoSala).HasColumnName("idTipoSala");

            entity.HasOne(d => d.IdTipoSalaNavigation).WithMany(p => p.Salas)
                .HasForeignKey(d => d.IdTipoSala)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fkTiposSalasSalas");
        });

        modelBuilder.Entity<SalasXempleado>(entity =>
        {
            entity.HasKey(e => e.IdSalaXempleado).HasName("pkSalasXEmpleados");

            entity.ToTable("SalasXEmpleados");

            entity.Property(e => e.IdSalaXempleado).HasColumnName("idSalaXEmpleado");
            entity.Property(e => e.IdEmpleado).HasColumnName("idEmpleado");
            entity.Property(e => e.NumeroSala).HasColumnName("numeroSala");

            entity.HasOne(d => d.IdEmpleadoNavigation).WithMany(p => p.SalasXempleados)
                .HasForeignKey(d => d.IdEmpleado)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fkEmpleadosSalasXEmpleados");

            entity.HasOne(d => d.NumeroSalaNavigation).WithMany(p => p.SalasXempleados)
                .HasForeignKey(d => d.NumeroSala)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fkSalasSalasXEmpleados");
        });

        modelBuilder.Entity<TiposSala>(entity =>
        {
            entity.HasKey(e => e.IdTipoSala).HasName("pkTiposSalas");

            entity.Property(e => e.IdTipoSala).HasColumnName("idTipoSala");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("nombre");
        });

        modelBuilder.Entity<Usuario>(entity =>
        {
            entity.HasKey(e => e.IdUsuario).HasName("PK_usuarios");

            entity.Property(e => e.IdUsuario).HasColumnName("idUsuario");
            entity.Property(e => e.Contrasenia)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("contrasenia");
            entity.Property(e => e.EMail)
                .HasMaxLength(320)
                .IsUnicode(false)
                .HasColumnName("e-mail");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}